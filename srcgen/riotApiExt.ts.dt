{{
    const dotUtils = require('./dotUtils.js');
    const spec = require('./.spec');
}}{{= dotUtils.PREAMBLE }}

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version {{= spec.info.version }}


{{
    const endpointGroups = {};
    const endpointMethodGroups = {};

    for (const endpointPair of Object.entries(spec.paths)) {
        const [ route, path ] = endpointPair;
        const ep = path['x-endpoint'];
        (endpointGroups[ep] || (endpointGroups[ep] = [])).push(endpointPair);
        endpointMethodGroups[ep] || (endpointMethodGroups[ep] = []);

        for (const [ verb, operation ] of Object.entries(path)) {
            if (verb.startsWith('x-')) continue;
            const [ endpoint, method ] = operation.operationId.split('.');
            /* const ep = dotUtils.toLowerCamel(endpoint); */
            const descArr = operation.description ? operation.description.split('\n') : [];

            let returnType = 'void';
            const resp200 = operation.responses['200'];
            if (resp200 && resp200.content) {
                const jsonInfo = resp200.content['application/json'];
                const returnTypeOptional = operation['x-nullable-404'];
                returnType = dotUtils.formatPropType(jsonInfo.schema, returnTypeOptional);
            }

            /* TODO: handle body params? */

            /* Build argument comment & string. */
            const argBuilder = [];
            const argTypeBuilder = [];
            const params = operation.parameters;
            if (params && params.length) {
                const allParamsOptional = params.every(p => !p.required);
                argBuilder.push(', args');
                if (allParamsOptional)
                    argBuilder.push('?');
                argBuilder.push(': { ');
                argTypeBuilder.push('{ ');
                for (const { name, required, schema } of params) {
                    tokens = [ name, required ? '' : '?', ': ', dotUtils.formatPropType(schema, !required), ', ' ];
                    argBuilder.push(...tokens);
                    argTypeBuilder.push(...tokens);
                }
                argBuilder.pop();
                argTypeBuilder.pop();
                argBuilder.push(' }');
                argTypeBuilder.push(' }');
            }
            else {
                argTypeBuilder.push('{}');
            }
            const args = argBuilder.join('');
            const argType = argTypeBuilder.join('');

            endpointMethodGroups[ep].push({
                route,
                descArr,
                method,
                args,
                argType,
                returnType,
            });
        }
    }
}}

{{
    for (const [ endpointName, endpointMethods ] of Object.entries(endpointMethodGroups))
    {
        const endpoint = dotUtils.toUpperCamel(endpointName);
}}

/**
 * {{= endpoint }} endpoints handle, accessed via `RiotApi.{{= dotUtils.toLowerCamel(endpointName) }}`.
 * # Riot Developer API Reference
 * <a href="https://developer.riotgames.com/apis#{{= endpointName }}" target="_blank">`{{= endpointName }}`</a>
 * 
 * Note: this is automatically generated.
 */
interface {{= endpoint }} {
{{
        for (const endpointMethod of endpointMethods)
        {
            const { route, descArr, method, args, argType, returnType } = endpointMethod;
}}
    /**
{{
            for (const descLine of descArr)
            {
}}
     * {{= descLine }}
{{
            }
}}
     */
    {{= method }}(region: Region{{= args }}): {{= returnType }};
{{
        }
}}
}
{{
    }
}}

const SpecRiotApi = {
{{
    for (const [ endpointName, endpointMethods ] of Object.entries(endpointMethodGroups))
    {
        const ep = dotUtils.toLowerCamel(endpointName);
}}
    {{= ep }}: {
{{
        for (const endpointMethod of endpointMethods)
        {
            const { route, descArr, method, args, argType, returnType } = endpointMethod;
}}
        {{= method }}: {
            path: {{= JSON.stringify(route) }},
        } as MethodSpec<{{= argType }}, {{= returnType }}>,
{{
        }
}}
    },
{{
    }
}}
};
