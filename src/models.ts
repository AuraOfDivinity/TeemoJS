///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version ce249d47e5205e2141923e8dade20ac0ac4fc33c

namespace accountV1 {
    /**
     * AccountDto data object, automatically generated.
     */
    export interface AccountDto {
        puuid: string;
        gameName: string;
        tagLine: string;
    }
}

namespace accountV1 {
    /**
     * ActiveShardDto data object, automatically generated.
     */
    export interface ActiveShardDto {
        puuid: string;
        game: string;
        activeShard: string;
    }
}

namespace championMasteryV4 {
    /**
     * ChampionMasteryDTO data object, automatically generated.
     * # Description
     * This object contains single Champion Mastery information for player and champion combination.
     */
    export interface ChampionMasteryDTO {
        /** Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion. */
        championPointsUntilNextLevel: long;
        /** Is chest granted for this champion or not in current season. */
        chestGranted: boolean;
        /** Champion ID for this entry. */
        championId: long;
        /** Last time this champion was played by this player - in Unix milliseconds time format. */
        lastPlayTime: long;
        /** Champion level for specified player and champion combination. */
        championLevel: int;
        /** Summoner ID for this entry. (Encrypted) */
        summonerId: string;
        /** Total number of champion points for this player and champion combination - they are used to determine championLevel. */
        championPoints: int;
        /** Number of points earned since current level has been achieved. */
        championPointsSinceLastLevel: long;
        /** The token earned for this champion to levelup. */
        tokensEarned: int;
    }
}

namespace championV3 {
    /**
     * ChampionInfo data object, automatically generated.
     */
    export interface ChampionInfo {
        maxNewPlayerLevel: int;
        freeChampionIdsForNewPlayers: int[];
        freeChampionIds: int[];
    }
}

namespace clashV1 {
    /**
     * PlayerDto data object, automatically generated.
     */
    export interface PlayerDto {
        summonerId: string;
        teamId: string;
        /** (Legal values:  UNSELECTED,  FILL,  TOP,  JUNGLE,  MIDDLE,  BOTTOM,  UTILITY) */
        position: "UNSELECTED" | "FILL" | "TOP" | "JUNGLE" | "MIDDLE" | "BOTTOM" | "UTILITY";
        /** (Legal values:  CAPTAIN,  MEMBER) */
        role: "CAPTAIN" | "MEMBER";
    }
}

namespace clashV1 {
    /**
     * TeamDto data object, automatically generated.
     */
    export interface TeamDto {
        id: string;
        tournamentId: int;
        name: string;
        iconId: int;
        tier: int;
        /** Summoner ID of the team captain. */
        captain: string;
        abbreviation: string;
        /** Team members. */
        players: clashV1.PlayerDto[];
    }
}

namespace clashV1 {
    /**
     * TournamentDto data object, automatically generated.
     */
    export interface TournamentDto {
        id: int;
        themeId: int;
        nameKey: string;
        nameKeySecondary: string;
        /** Tournament phase. */
        schedule: clashV1.TournamentPhaseDto[];
    }
}

namespace clashV1 {
    /**
     * TournamentPhaseDto data object, automatically generated.
     */
    export interface TournamentPhaseDto {
        id: int;
        registrationTime: long;
        startTime: long;
        cancelled: boolean;
    }
}

namespace leagueExpV4 {
    /**
     * LeagueEntryDTO data object, automatically generated.
     */
    export interface LeagueEntryDTO {
        leagueId: string;
        /** Player's summonerId (Encrypted) */
        summonerId: string;
        summonerName: string;
        queueType: string;
        tier: string;
        rank: string;
        leaguePoints: int;
        /** Winning team on Summoners Rift. First placement in Teamfight Tactics. */
        wins: int;
        /** Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics. */
        losses: int;
        hotStreak: boolean;
        veteran: boolean;
        freshBlood: boolean;
        inactive: boolean;
        miniSeries?: leagueExpV4.MiniSeriesDTO | null;
    }
}

namespace leagueExpV4 {
    /**
     * MiniSeriesDTO data object, automatically generated.
     */
    export interface MiniSeriesDTO {
        losses: int;
        progress: string;
        target: int;
        wins: int;
    }
}

namespace leagueV4 {
    /**
     * LeagueListDTO data object, automatically generated.
     */
    export interface LeagueListDTO {
        leagueId: string;
        entries: leagueV4.LeagueItemDTO[];
        tier: string;
        name: string;
        queue: string;
    }
}

namespace leagueV4 {
    /**
     * LeagueItemDTO data object, automatically generated.
     */
    export interface LeagueItemDTO {
        freshBlood: boolean;
        /** Winning team on Summoners Rift. */
        wins: int;
        summonerName: string;
        miniSeries?: leagueV4.MiniSeriesDTO | null;
        inactive: boolean;
        veteran: boolean;
        hotStreak: boolean;
        rank: string;
        leaguePoints: int;
        /** Losing team on Summoners Rift. */
        losses: int;
        /** Player's encrypted summonerId. */
        summonerId: string;
    }
}

namespace leagueV4 {
    /**
     * MiniSeriesDTO data object, automatically generated.
     */
    export interface MiniSeriesDTO {
        losses: int;
        progress: string;
        target: int;
        wins: int;
    }
}

namespace leagueV4 {
    /**
     * LeagueEntryDTO data object, automatically generated.
     */
    export interface LeagueEntryDTO {
        leagueId: string;
        /** Player's encrypted summonerId. */
        summonerId: string;
        summonerName: string;
        queueType: string;
        tier: string;
        rank: string;
        leaguePoints: int;
        /** Winning team on Summoners Rift. */
        wins: int;
        /** Losing team on Summoners Rift. */
        losses: int;
        hotStreak: boolean;
        veteran: boolean;
        freshBlood: boolean;
        inactive: boolean;
        miniSeries?: leagueV4.MiniSeriesDTO | null;
    }
}

namespace lolStatusV3 {
    /**
     * ShardStatus data object, automatically generated.
     */
    export interface ShardStatus {
        locales: string[];
        hostname: string;
        name: string;
        services: lolStatusV3.Service[];
        slug: string;
        region_tag: string;
    }
}

namespace lolStatusV3 {
    /**
     * Service data object, automatically generated.
     */
    export interface Service {
        incidents: lolStatusV3.Incident[];
        name: string;
        slug: string;
        status: string;
    }
}

namespace lolStatusV3 {
    /**
     * Incident data object, automatically generated.
     */
    export interface Incident {
        active: boolean;
        created_at: string;
        id: long;
        updates: lolStatusV3.Message[];
    }
}

namespace lolStatusV3 {
    /**
     * Message data object, automatically generated.
     */
    export interface Message {
        severity: string;
        updated_at: string;
        author: string;
        translations: lolStatusV3.Translation[];
        created_at: string;
        id: string;
        content: string;
    }
}

namespace lolStatusV3 {
    /**
     * Translation data object, automatically generated.
     */
    export interface Translation {
        locale: string;
        content: string;
        heading: string;
    }
}

namespace lorRankedV1 {
    /**
     * LeaderboardDto data object, automatically generated.
     */
    export interface LeaderboardDto {
        /** A list of players in Master tier. */
        players: lorRankedV1.PlayerDto[];
    }
}

namespace lorRankedV1 {
    /**
     * PlayerDto data object, automatically generated.
     */
    export interface PlayerDto {
        name: string;
        rank: int;
        /** League points. */
        lp: int;
    }
}

namespace matchV4 {
    /**
     * MatchDto data object, automatically generated.
     */
    export interface MatchDto {
        gameId: long;
        /** Participant identity information. Participant identity information is purposefully excluded for custom games. */
        participantIdentities: matchV4.ParticipantIdentityDto[];
        /** Please refer to the Game Constants documentation. */
        queueId: int;
        /** Please refer to the Game Constants documentation. */
        gameType: string;
        /** Match duration in seconds. */
        gameDuration: long;
        /** Team information. */
        teams: matchV4.TeamStatsDto[];
        /** Platform where the match was played. */
        platformId: string;
        /** Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00. */
        gameCreation: long;
        /** Please refer to the Game Constants documentation. */
        seasonId: int;
        /** The major.minor version typically indicates the patch the match was played on. */
        gameVersion: string;
        /** Please refer to the Game Constants documentation. */
        mapId: int;
        /** Please refer to the Game Constants documentation. */
        gameMode: string;
        /** Participant information. */
        participants: matchV4.ParticipantDto[];
    }
}

namespace matchV4 {
    /**
     * ParticipantIdentityDto data object, automatically generated.
     */
    export interface ParticipantIdentityDto {
        participantId: int;
        /** Player information not included in the response for custom matches. Custom matches are considered private unless a tournament code was used to create the match. */
        player: matchV4.PlayerDto;
    }
}

namespace matchV4 {
    /**
     * PlayerDto data object, automatically generated.
     */
    export interface PlayerDto {
        profileIcon: int;
        /** Player's original accountId. */
        accountId: string;
        matchHistoryUri: string;
        /** Player's current accountId when the match was played. */
        currentAccountId: string;
        /** Player's current platformId when the match was played. */
        currentPlatformId: string;
        summonerName: string;
        /** Player's summonerId (Encrypted) */
        summonerId: string;
        /** Player's original platformId. */
        platformId: string;
    }
}

namespace matchV4 {
    /**
     * TeamStatsDto data object, automatically generated.
     */
    export interface TeamStatsDto {
        /** Number of towers the team destroyed. */
        towerKills: int;
        /** Number of times the team killed Rift Herald. */
        riftHeraldKills: int;
        /** Flag indicating whether or not the team scored the first blood. */
        firstBlood: boolean;
        /** Number of inhibitors the team destroyed. */
        inhibitorKills: int;
        /** If match queueId has a draft, contains banned champion data, otherwise empty. */
        bans: matchV4.TeamBansDto[];
        /** Flag indicating whether or not the team scored the first Baron kill. */
        firstBaron: boolean;
        /** Flag indicating whether or not the team scored the first Dragon kill. */
        firstDragon: boolean;
        /** For Dominion matches, specifies the points the team had at game end. */
        dominionVictoryScore: int;
        /** Number of times the team killed Dragon. */
        dragonKills: int;
        /** Number of times the team killed Baron. */
        baronKills: int;
        /** Flag indicating whether or not the team destroyed the first inhibitor. */
        firstInhibitor: boolean;
        /** Flag indicating whether or not the team destroyed the first tower. */
        firstTower: boolean;
        /** Number of times the team killed Vilemaw. */
        vilemawKills: int;
        /** Flag indicating whether or not the team scored the first Rift Herald kill. */
        firstRiftHerald: boolean;
        /** 100 for blue side. 200 for red side. */
        teamId: int;
        /** String indicating whether or not the team won. There are only two values visibile in public match history.
             (Legal values:  Fail,  Win) */
        win: "Fail" | "Win";
    }
}

namespace matchV4 {
    /**
     * TeamBansDto data object, automatically generated.
     */
    export interface TeamBansDto {
        /** Banned championId. */
        championId: int;
        /** Turn during which the champion was banned. */
        pickTurn: int;
    }
}

namespace matchV4 {
    /**
     * ParticipantDto data object, automatically generated.
     */
    export interface ParticipantDto {
        participantId: int;
        championId: int;
        /** List of legacy Rune information. Not included for matches played with Runes Reforged. */
        runes?: matchV4.RuneDto[] | null;
        /** Participant statistics. */
        stats: matchV4.ParticipantStatsDto;
        /** 100 for blue side. 200 for red side. */
        teamId: int;
        /** Participant timeline data. */
        timeline: matchV4.ParticipantTimelineDto;
        /** First Summoner Spell id. */
        spell1Id: int;
        /** Second Summoner Spell id. */
        spell2Id: int;
        /** Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.
             (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED) */
        highestAchievedSeasonTier?: "CHALLENGER" | "MASTER" | "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "UNRANKED" | null;
        /** List of legacy Mastery information. Not included for matches played with Runes Reforged. */
        masteries?: matchV4.MasteryDto[] | null;
    }
}

namespace matchV4 {
    /**
     * RuneDto data object, automatically generated.
     */
    export interface RuneDto {
        runeId: int;
        rank: int;
    }
}

namespace matchV4 {
    /**
     * ParticipantStatsDto data object, automatically generated.
     */
    export interface ParticipantStatsDto {
        item0: int;
        item2: int;
        totalUnitsHealed: int;
        item1: int;
        largestMultiKill: int;
        goldEarned: int;
        firstInhibitorKill?: boolean | null;
        physicalDamageTaken: long;
        nodeNeutralizeAssist?: int | null;
        totalPlayerScore?: int | null;
        champLevel: int;
        damageDealtToObjectives: long;
        totalDamageTaken: long;
        neutralMinionsKilled: int;
        deaths: int;
        tripleKills: int;
        magicDamageDealtToChampions: long;
        wardsKilled: int;
        pentaKills: int;
        damageSelfMitigated: long;
        largestCriticalStrike: int;
        nodeNeutralize?: int | null;
        totalTimeCrowdControlDealt: int;
        firstTowerKill?: boolean | null;
        magicDamageDealt: long;
        totalScoreRank?: int | null;
        nodeCapture?: int | null;
        wardsPlaced?: int | null;
        totalDamageDealt: long;
        timeCCingOthers: long;
        magicalDamageTaken: long;
        largestKillingSpree: int;
        totalDamageDealtToChampions: long;
        physicalDamageDealtToChampions: long;
        neutralMinionsKilledTeamJungle: int;
        totalMinionsKilled: int;
        firstInhibitorAssist?: boolean | null;
        visionWardsBoughtInGame: int;
        objectivePlayerScore?: int | null;
        kills: int;
        firstTowerAssist?: boolean | null;
        combatPlayerScore?: int | null;
        inhibitorKills?: int | null;
        turretKills?: int | null;
        participantId: int;
        trueDamageTaken: long;
        firstBloodAssist?: boolean | null;
        nodeCaptureAssist?: int | null;
        assists: int;
        teamObjective?: int | null;
        altarsNeutralized?: int | null;
        goldSpent: int;
        damageDealtToTurrets: long;
        altarsCaptured?: int | null;
        win: boolean;
        totalHeal: long;
        unrealKills: int;
        visionScore?: long | null;
        physicalDamageDealt: long;
        firstBloodKill?: boolean | null;
        longestTimeSpentLiving: int;
        killingSprees: int;
        sightWardsBoughtInGame?: int | null;
        trueDamageDealtToChampions: long;
        neutralMinionsKilledEnemyJungle: int;
        doubleKills: int;
        trueDamageDealt: long;
        quadraKills: int;
        item4: int;
        item3: int;
        item6: int;
        item5: int;
        playerScore0?: int | null;
        playerScore1?: int | null;
        playerScore2?: int | null;
        playerScore3?: int | null;
        playerScore4?: int | null;
        playerScore5?: int | null;
        playerScore6?: int | null;
        playerScore7?: int | null;
        playerScore8?: int | null;
        playerScore9?: int | null;
        /** Primary path keystone rune. */
        perk0?: int | null;
        /** Post game rune stats. */
        perk0Var1?: int | null;
        /** Post game rune stats. */
        perk0Var2?: int | null;
        /** Post game rune stats. */
        perk0Var3?: int | null;
        /** Primary path rune. */
        perk1?: int | null;
        /** Post game rune stats. */
        perk1Var1?: int | null;
        /** Post game rune stats. */
        perk1Var2?: int | null;
        /** Post game rune stats. */
        perk1Var3?: int | null;
        /** Primary path rune. */
        perk2?: int | null;
        /** Post game rune stats. */
        perk2Var1?: int | null;
        /** Post game rune stats. */
        perk2Var2?: int | null;
        /** Post game rune stats. */
        perk2Var3?: int | null;
        /** Primary path rune. */
        perk3?: int | null;
        /** Post game rune stats. */
        perk3Var1?: int | null;
        /** Post game rune stats. */
        perk3Var2?: int | null;
        /** Post game rune stats. */
        perk3Var3?: int | null;
        /** Secondary path rune. */
        perk4?: int | null;
        /** Post game rune stats. */
        perk4Var1?: int | null;
        /** Post game rune stats. */
        perk4Var2?: int | null;
        /** Post game rune stats. */
        perk4Var3?: int | null;
        /** Secondary path rune. */
        perk5?: int | null;
        /** Post game rune stats. */
        perk5Var1?: int | null;
        /** Post game rune stats. */
        perk5Var2?: int | null;
        /** Post game rune stats. */
        perk5Var3?: int | null;
        /** Primary rune path */
        perkPrimaryStyle?: int | null;
        /** Secondary rune path */
        perkSubStyle?: int | null;
    }
}

namespace matchV4 {
    /**
     * ParticipantTimelineDto data object, automatically generated.
     */
    export interface ParticipantTimelineDto {
        participantId?: int | null;
        /** Creep score difference versus the calculated lane opponent(s) for a specified period. */
        csDiffPerMinDeltas?: { [key: string]: double } | null;
        /** Damage taken for a specified period. */
        damageTakenPerMinDeltas?: { [key: string]: double } | null;
        /** Participant's calculated role.
             (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT) */
        role?: "DUO" | "NONE" | "SOLO" | "DUO_CARRY" | "DUO_SUPPORT" | null;
        /** Damage taken difference versus the calculated lane opponent(s) for a specified period. */
        damageTakenDiffPerMinDeltas?: { [key: string]: double } | null;
        /** Experience change for a specified period. */
        xpPerMinDeltas?: { [key: string]: double } | null;
        /** Experience difference versus the calculated lane opponent(s) for a specified period. */
        xpDiffPerMinDeltas?: { [key: string]: double } | null;
        /** Participant's calculated lane. MID and BOT are legacy values.
             (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM) */
        lane?: "MID" | "MIDDLE" | "TOP" | "JUNGLE" | "BOT" | "BOTTOM" | null;
        /** Creeps for a specified period. */
        creepsPerMinDeltas?: { [key: string]: double } | null;
        /** Gold for a specified period. */
        goldPerMinDeltas?: { [key: string]: double } | null;
    }
}

namespace matchV4 {
    /**
     * MasteryDto data object, automatically generated.
     */
    export interface MasteryDto {
        rank: int;
        masteryId: int;
    }
}

namespace matchV4 {
    /**
     * MatchlistDto data object, automatically generated.
     */
    export interface MatchlistDto {
        startIndex: int;
        /** There is a known issue that this field doesn't correctly return the total number of games that match the parameters of the request. Please paginate using beginIndex until you reach the end of a player's matchlist. */
        totalGames: int;
        endIndex: int;
        matches: matchV4.MatchReferenceDto[];
    }
}

namespace matchV4 {
    /**
     * MatchReferenceDto data object, automatically generated.
     */
    export interface MatchReferenceDto {
        gameId: long;
        role: string;
        season: int;
        platformId: string;
        champion: int;
        queue: int;
        lane: string;
        timestamp: long;
    }
}

namespace matchV4 {
    /**
     * MatchTimelineDto data object, automatically generated.
     */
    export interface MatchTimelineDto {
        frames: matchV4.MatchFrameDto[];
        frameInterval: long;
    }
}

namespace matchV4 {
    /**
     * MatchFrameDto data object, automatically generated.
     */
    export interface MatchFrameDto {
        participantFrames: { [key: string]: matchV4.MatchParticipantFrameDto };
        events: matchV4.MatchEventDto[];
        timestamp: long;
    }
}

namespace matchV4 {
    /**
     * MatchParticipantFrameDto data object, automatically generated.
     */
    export interface MatchParticipantFrameDto {
        participantId: int;
        minionsKilled: int;
        teamScore?: int | null;
        dominionScore?: int | null;
        totalGold: int;
        level: int;
        xp: int;
        currentGold: int;
        position?: matchV4.MatchPositionDto | null;
        jungleMinionsKilled: int;
    }
}

namespace matchV4 {
    /**
     * MatchPositionDto data object, automatically generated.
     */
    export interface MatchPositionDto {
        x: int;
        y: int;
    }
}

namespace matchV4 {
    /**
     * MatchEventDto data object, automatically generated.
     */
    export interface MatchEventDto {
        laneType?: string | null;
        skillSlot?: int | null;
        ascendedType?: string | null;
        creatorId?: int | null;
        afterId?: int | null;
        eventType?: string | null;
        /** (Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL,  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO,  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON) */
        type: "CHAMPION_KILL" | "WARD_PLACED" | "WARD_KILL" | "BUILDING_KILL" | "ELITE_MONSTER_KILL" | "ITEM_PURCHASED" | "ITEM_SOLD" | "ITEM_DESTROYED" | "ITEM_UNDO" | "SKILL_LEVEL_UP" | "ASCENDED_EVENT" | "CAPTURE_POINT" | "PORO_KING_SUMMON";
        levelUpType?: string | null;
        wardType?: string | null;
        participantId?: int | null;
        towerType?: string | null;
        itemId?: int | null;
        beforeId?: int | null;
        pointCaptured?: string | null;
        monsterType?: string | null;
        monsterSubType?: string | null;
        teamId?: int | null;
        position?: matchV4.MatchPositionDto | null;
        killerId?: int | null;
        timestamp: long;
        assistingParticipantIds?: int[] | null;
        buildingType?: string | null;
        victimId?: int | null;
    }
}

namespace spectatorV4 {
    /**
     * CurrentGameInfo data object, automatically generated.
     */
    export interface CurrentGameInfo {
        /** The ID of the game */
        gameId: long;
        /** The game type */
        gameType: string;
        /** The game start time represented in epoch milliseconds */
        gameStartTime: long;
        /** The ID of the map */
        mapId: long;
        /** The amount of time in seconds that has passed since the game started */
        gameLength: long;
        /** The ID of the platform on which the game is being played */
        platformId: string;
        /** The game mode */
        gameMode: string;
        /** Banned champion information */
        bannedChampions: spectatorV4.BannedChampion[];
        /** The queue type (queue types are documented on the Game Constants page) */
        gameQueueConfigId?: long | null;
        /** The observer information */
        observers: spectatorV4.Observer;
        /** The participant information */
        participants: spectatorV4.CurrentGameParticipant[];
    }
}

namespace spectatorV4 {
    /**
     * BannedChampion data object, automatically generated.
     */
    export interface BannedChampion {
        /** The turn during which the champion was banned */
        pickTurn: int;
        /** The ID of the banned champion */
        championId: long;
        /** The ID of the team that banned the champion */
        teamId: long;
    }
}

namespace spectatorV4 {
    /**
     * Observer data object, automatically generated.
     */
    export interface Observer {
        /** Key used to decrypt the spectator grid game data for playback */
        encryptionKey: string;
    }
}

namespace spectatorV4 {
    /**
     * CurrentGameParticipant data object, automatically generated.
     */
    export interface CurrentGameParticipant {
        /** The ID of the champion played by this participant */
        championId: long;
        /** Perks/Runes Reforged Information */
        perks: spectatorV4.Perks;
        /** The ID of the profile icon used by this participant */
        profileIconId: long;
        /** Flag indicating whether or not this participant is a bot */
        bot: boolean;
        /** The team ID of this participant, indicating the participant's team */
        teamId: long;
        /** The summoner name of this participant */
        summonerName: string;
        /** The encrypted summoner ID of this participant */
        summonerId: string;
        /** The ID of the first summoner spell used by this participant */
        spell1Id: long;
        /** The ID of the second summoner spell used by this participant */
        spell2Id: long;
        /** List of Game Customizations */
        gameCustomizationObjects: spectatorV4.GameCustomizationObject[];
    }
}

namespace spectatorV4 {
    /**
     * Perks data object, automatically generated.
     */
    export interface Perks {
        /** IDs of the perks/runes assigned. */
        perkIds: long[];
        /** Primary runes path */
        perkStyle: long;
        /** Secondary runes path */
        perkSubStyle: long;
    }
}

namespace spectatorV4 {
    /**
     * GameCustomizationObject data object, automatically generated.
     */
    export interface GameCustomizationObject {
        /** Category identifier for Game Customization */
        category: string;
        /** Game Customization content */
        content: string;
    }
}

namespace spectatorV4 {
    /**
     * FeaturedGames data object, automatically generated.
     */
    export interface FeaturedGames {
        /** The list of featured games */
        gameList: spectatorV4.FeaturedGameInfo[];
        /** The suggested interval to wait before requesting FeaturedGames again */
        clientRefreshInterval: long;
    }
}

namespace spectatorV4 {
    /**
     * FeaturedGameInfo data object, automatically generated.
     */
    export interface FeaturedGameInfo {
        /** The game mode
             (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO) */
        gameMode: "CLASSIC" | "ODIN" | "ARAM" | "TUTORIAL" | "ONEFORALL" | "ASCENSION" | "FIRSTBLOOD" | "KINGPORO";
        /** The amount of time in seconds that has passed since the game started */
        gameLength: long;
        /** The ID of the map */
        mapId: long;
        /** The game type
             (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME) */
        gameType: "CUSTOM_GAME" | "MATCHED_GAME" | "TUTORIAL_GAME";
        /** Banned champion information */
        bannedChampions: spectatorV4.BannedChampion[];
        /** The ID of the game */
        gameId: long;
        /** The observer information */
        observers: spectatorV4.Observer;
        /** The queue type (queue types are documented on the Game Constants page) */
        gameQueueConfigId: long;
        /** The game start time represented in epoch milliseconds */
        gameStartTime: long;
        /** The participant information */
        participants: spectatorV4.Participant[];
        /** The ID of the platform on which the game is being played */
        platformId: string;
    }
}

namespace spectatorV4 {
    /**
     * Participant data object, automatically generated.
     */
    export interface Participant {
        /** Flag indicating whether or not this participant is a bot */
        bot: boolean;
        /** The ID of the second summoner spell used by this participant */
        spell2Id: long;
        /** The ID of the profile icon used by this participant */
        profileIconId: long;
        /** The summoner name of this participant */
        summonerName: string;
        /** The ID of the champion played by this participant */
        championId: long;
        /** The team ID of this participant, indicating the participant's team */
        teamId: long;
        /** The ID of the first summoner spell used by this participant */
        spell1Id: long;
    }
}

namespace summonerV4 {
    /**
     * SummonerDTO data object, automatically generated.
     * # Description
     * represents a summoner
     */
    export interface SummonerDTO {
        /** Encrypted account ID. Max length 56 characters. */
        accountId: string;
        /** ID of the summoner icon associated with the summoner. */
        profileIconId: int;
        /** Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: summoner name change, summoner level change, or profile icon change. */
        revisionDate: long;
        /** Summoner name. */
        name: string;
        /** Encrypted summoner ID. Max length 63 characters. */
        id: string;
        /** Encrypted PUUID. Exact length of 78 characters. */
        puuid: string;
        /** Summoner level associated with the summoner. */
        summonerLevel: long;
    }
}

namespace tftLeagueV1 {
    /**
     * LeagueListDTO data object, automatically generated.
     */
    export interface LeagueListDTO {
        leagueId: string;
        entries: tftLeagueV1.LeagueItemDTO[];
        tier: string;
        name: string;
        queue: string;
    }
}

namespace tftLeagueV1 {
    /**
     * LeagueItemDTO data object, automatically generated.
     */
    export interface LeagueItemDTO {
        freshBlood: boolean;
        /** First placement. */
        wins: int;
        summonerName: string;
        miniSeries?: tftLeagueV1.MiniSeriesDTO | null;
        inactive: boolean;
        veteran: boolean;
        hotStreak: boolean;
        rank: string;
        leaguePoints: int;
        /** Second through eighth placement. */
        losses: int;
        /** Player's encrypted summonerId. */
        summonerId: string;
    }
}

namespace tftLeagueV1 {
    /**
     * MiniSeriesDTO data object, automatically generated.
     */
    export interface MiniSeriesDTO {
        losses: int;
        progress: string;
        target: int;
        wins: int;
    }
}

namespace tftLeagueV1 {
    /**
     * LeagueEntryDTO data object, automatically generated.
     */
    export interface LeagueEntryDTO {
        leagueId: string;
        /** Player's encrypted summonerId. */
        summonerId: string;
        summonerName: string;
        queueType: string;
        tier: string;
        rank: string;
        leaguePoints: int;
        /** First placement. */
        wins: int;
        /** Second through eighth placement. */
        losses: int;
        hotStreak: boolean;
        veteran: boolean;
        freshBlood: boolean;
        inactive: boolean;
        miniSeries?: tftLeagueV1.MiniSeriesDTO | null;
    }
}

namespace tftMatchV1 {
    /**
     * MatchDto data object, automatically generated.
     */
    export interface MatchDto {
        /** Match metadata. */
        metadata: tftMatchV1.MetadataDto;
        /** Match info. */
        info: tftMatchV1.InfoDto;
    }
}

namespace tftMatchV1 {
    /**
     * MetadataDto data object, automatically generated.
     */
    export interface MetadataDto {
        /** Match data version. */
        data_version: string;
        /** Match id. */
        match_id: string;
        /** A list of encrypted participant PUUIDs. */
        participants: string[];
    }
}

namespace tftMatchV1 {
    /**
     * InfoDto data object, automatically generated.
     */
    export interface InfoDto {
        /** Unix timestamp. */
        game_datetime: long;
        /** Game length in seconds. */
        game_length: float;
        /** Game variation key. Game variations documented in TFT static data. */
        game_variation?: string | null;
        /** Game client version. */
        game_version: string;
        /** Participants. */
        participants: tftMatchV1.ParticipantDto[];
        /** Please refer to the League of Legends documentation. */
        queue_id: int;
        /** Teamfight Tactics set number. */
        tft_set_number: int;
    }
}

namespace tftMatchV1 {
    /**
     * ParticipantDto data object, automatically generated.
     */
    export interface ParticipantDto {
        /** Participant's companion. */
        companion: tftMatchV1.CompanionDto;
        /** Gold left after participant was eliminated. */
        gold_left: int;
        /** The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5. */
        last_round: int;
        /** Participant Little Legend level. Note: This is not the number of active units. */
        level: int;
        /** Participant placement upon elimination. */
        placement: int;
        /** Number of players the participant eliminated. */
        players_eliminated: int;
        /** Encrypted PUUID. */
        puuid: string;
        /** The number of seconds before the participant was eliminated. */
        time_eliminated: float;
        /** Damage the participant dealt to other players. */
        total_damage_to_players: int;
        /** A complete list of traits for the participant's active units. */
        traits: tftMatchV1.TraitDto[];
        /** A list of active units for the participant. */
        units: tftMatchV1.UnitDto[];
    }
}

namespace tftMatchV1 {
    /**
     * TraitDto data object, automatically generated.
     */
    export interface TraitDto {
        /** Trait name. */
        name: string;
        /** Number of units with this trait. */
        num_units: int;
        /** Current active tier for the trait. */
        tier_current: int;
        /** Total tiers for the trait. */
        tier_total?: int | null;
    }
}

namespace tftMatchV1 {
    /**
     * UnitDto data object, automatically generated.
     */
    export interface UnitDto {
        /** A list of the unit's items. Please refer to the Teamfight Tactics documentation for item ids. */
        items: int[];
        /** This field was introduced in patch 9.22 with data_version 2. */
        character_id: string;
        /** Unit name. */
        name: string;
        /** Unit rarity. This doesn't equate to the unit cost. */
        rarity: int;
        /** Unit tier. */
        tier: int;
    }
}

namespace tftMatchV1 {
    /**
     * CompanionDto data object, automatically generated.
     */
    export interface CompanionDto {
        skin_ID: int;
        content_ID: string;
        species: string;
    }
}

namespace tftSummonerV1 {
    /**
     * SummonerDTO data object, automatically generated.
     * # Description
     * represents a summoner
     */
    export interface SummonerDTO {
        /** Encrypted account ID. Max length 56 characters. */
        accountId: string;
        /** ID of the summoner icon associated with the summoner. */
        profileIconId: int;
        /** Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: summoner name change, summoner level change, or profile icon change. */
        revisionDate: long;
        /** Summoner name. */
        name: string;
        /** Encrypted summoner ID. Max length 63 characters. */
        id: string;
        /** Encrypted PUUID. Exact length of 78 characters. */
        puuid: string;
        /** Summoner level associated with the summoner. */
        summonerLevel: long;
    }
}

namespace tournamentStubV4 {
    /**
     * TournamentCodeParameters data object, automatically generated.
     */
    export interface TournamentCodeParameters {
        /** Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future. */
        allowedSummonerIds?: string[] | null;
        /** Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game. */
        metadata?: string | null;
        /** The team size of the game. Valid values are 1-5. */
        teamSize: int;
        /** The pick type of the game.
             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT) */
        pickType: "BLIND_PICK" | "DRAFT_MODE" | "ALL_RANDOM" | "TOURNAMENT_DRAFT";
        /** The map type of the game.
             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS) */
        mapType: "SUMMONERS_RIFT" | "TWISTED_TREELINE" | "HOWLING_ABYSS";
        /** The spectator type of the game.
             (Legal values:  NONE,  LOBBYONLY,  ALL) */
        spectatorType: "NONE" | "LOBBYONLY" | "ALL";
    }
}

namespace tournamentStubV4 {
    /**
     * LobbyEventDTOWrapper data object, automatically generated.
     */
    export interface LobbyEventDTOWrapper {
        eventList: tournamentStubV4.LobbyEventDTO[];
    }
}

namespace tournamentStubV4 {
    /**
     * LobbyEventDTO data object, automatically generated.
     */
    export interface LobbyEventDTO {
        /** The summonerId that triggered the event (Encrypted) */
        summonerId: string;
        /** The type of event that was triggered */
        eventType: string;
        /** Timestamp from the event */
        timestamp: string;
    }
}

namespace tournamentStubV4 {
    /**
     * ProviderRegistrationParameters data object, automatically generated.
     */
    export interface ProviderRegistrationParameters {
        /** The region in which the provider will be running tournaments.
             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR) */
        region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR";
        /** The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443). */
        url: string;
    }
}

namespace tournamentStubV4 {
    /**
     * TournamentRegistrationParameters data object, automatically generated.
     */
    export interface TournamentRegistrationParameters {
        /** The provider ID to specify the regional registered provider data to associate this tournament. */
        providerId: int;
        /** The optional name of the tournament. */
        name?: string | null;
    }
}

namespace tournamentV4 {
    /**
     * TournamentCodeParameters data object, automatically generated.
     */
    export interface TournamentCodeParameters {
        /** Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future. */
        allowedSummonerIds?: string[] | null;
        /** Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game. */
        metadata?: string | null;
        /** The team size of the game. Valid values are 1-5. */
        teamSize: int;
        /** The pick type of the game.
             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT) */
        pickType: "BLIND_PICK" | "DRAFT_MODE" | "ALL_RANDOM" | "TOURNAMENT_DRAFT";
        /** The map type of the game.
             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS) */
        mapType: "SUMMONERS_RIFT" | "TWISTED_TREELINE" | "HOWLING_ABYSS";
        /** The spectator type of the game.
             (Legal values:  NONE,  LOBBYONLY,  ALL) */
        spectatorType: "NONE" | "LOBBYONLY" | "ALL";
    }
}

namespace tournamentV4 {
    /**
     * TournamentCodeDTO data object, automatically generated.
     */
    export interface TournamentCodeDTO {
        /** The tournament code. */
        code: string;
        /** The spectator mode for the tournament code game. */
        spectators: string;
        /** The lobby name for the tournament code game. */
        lobbyName: string;
        /** The metadata for tournament code. */
        metaData: string;
        /** The password for the tournament code game. */
        password: string;
        /** The team size for the tournament code game. */
        teamSize: int;
        /** The provider's ID. */
        providerId: int;
        /** The pick mode for tournament code game. */
        pickType: string;
        /** The tournament's ID. */
        tournamentId: int;
        /** The tournament code's ID. */
        id: int;
        /** The tournament code's region.
             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR) */
        region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR";
        /** The game map for the tournament code game */
        map: string;
        /** The summonerIds of the participants (Encrypted) */
        participants: string[];
    }
}

namespace tournamentV4 {
    /**
     * TournamentCodeUpdateParameters data object, automatically generated.
     */
    export interface TournamentCodeUpdateParameters {
        /** Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future. */
        allowedSummonerIds?: string[] | null;
        /** The pick type
             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT) */
        pickType: "BLIND_PICK" | "DRAFT_MODE" | "ALL_RANDOM" | "TOURNAMENT_DRAFT";
        /** The map type
             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS) */
        mapType: "SUMMONERS_RIFT" | "TWISTED_TREELINE" | "HOWLING_ABYSS";
        /** The spectator type
             (Legal values:  NONE,  LOBBYONLY,  ALL) */
        spectatorType: "NONE" | "LOBBYONLY" | "ALL";
    }
}

namespace tournamentV4 {
    /**
     * LobbyEventDTOWrapper data object, automatically generated.
     */
    export interface LobbyEventDTOWrapper {
        eventList: tournamentV4.LobbyEventDTO[];
    }
}

namespace tournamentV4 {
    /**
     * LobbyEventDTO data object, automatically generated.
     */
    export interface LobbyEventDTO {
        /** Timestamp from the event */
        timestamp: string;
        /** The type of event that was triggered */
        eventType: string;
        /** The summonerId that triggered the event (Encrypted) */
        summonerId: string;
    }
}

namespace tournamentV4 {
    /**
     * ProviderRegistrationParameters data object, automatically generated.
     */
    export interface ProviderRegistrationParameters {
        /** The region in which the provider will be running tournaments.
             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR) */
        region: "BR" | "EUNE" | "EUW" | "JP" | "LAN" | "LAS" | "NA" | "OCE" | "PBE" | "RU" | "TR";
        /** The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443). */
        url: string;
    }
}

namespace tournamentV4 {
    /**
     * TournamentRegistrationParameters data object, automatically generated.
     */
    export interface TournamentRegistrationParameters {
        /** The provider ID to specify the regional registered provider data to associate this tournament. */
        providerId: int;
        /** The optional name of the tournament. */
        name?: string | null;
    }
}

namespace valContentV1 {
    /**
     * ContentDto data object, automatically generated.
     */
    export interface ContentDto {
        version: string;
        characters: valContentV1.ContentItemDto[];
        maps: valContentV1.ContentItemDto[];
        chromas: valContentV1.ContentItemDto[];
        skins: valContentV1.ContentItemDto[];
        skinLevels: valContentV1.ContentItemDto[];
        equips: valContentV1.ContentItemDto[];
        gameModes: valContentV1.ContentItemDto[];
        sprays: valContentV1.ContentItemDto[];
        sprayLevels: valContentV1.ContentItemDto[];
        charms: valContentV1.ContentItemDto[];
        charmLevels: valContentV1.ContentItemDto[];
        playerCards: valContentV1.ContentItemDto[];
        playerTitles: valContentV1.ContentItemDto[];
    }
}

namespace valContentV1 {
    /**
     * ContentItemDto data object, automatically generated.
     */
    export interface ContentItemDto {
        name: string;
        /** This field is excluded from the response when a locale is set */
        localizedNames?: valContentV1.LocalizedNamesDto | null;
        assetName: string;
    }
}

namespace valContentV1 {
    /**
     * LocalizedNamesDto data object, automatically generated.
     */
    export interface LocalizedNamesDto {
        "ar-AE": string;
        "de-DE": string;
        "en-GB": string;
        "en-US": string;
        "es-ES": string;
        "es-MX": string;
        "fr-FR": string;
        "id-ID": string;
        "it-IT": string;
        "ja-JP": string;
        "ko-KR": string;
        "pl-PL": string;
        "pt-BR": string;
        "ru-RU": string;
        "th-TH": string;
        "tr-TR": string;
        "vi-VN": string;
        "zh-CN": string;
        "zh-TW": string;
    }
}

namespace valMatchV1 {
    /**
     * MatchDto data object, automatically generated.
     */
    export interface MatchDto {
        matchInfo: valMatchV1.MatchInfoDto[];
        players: valMatchV1.PlayerDto[];
        teams: valMatchV1.TeamDto[];
        roundResults: valMatchV1.RoundResultDto[];
    }
}

namespace valMatchV1 {
    /**
     * MatchInfoDto data object, automatically generated.
     */
    export interface MatchInfoDto {
        matchId: string;
        mapId: string;
        gameLengthMillis: int;
        gameStartMillis: long;
        provisioningFlowId: string;
        isCompleted: boolean;
        customGameName: string;
        queueId: string;
        gameMode: string;
        isRanked: boolean;
        seasonId: string;
    }
}

namespace valMatchV1 {
    /**
     * PlayerDto data object, automatically generated.
     */
    export interface PlayerDto {
        puuid: string;
        teamId: string;
        partyId: string;
        characterId: string;
        stats: valMatchV1.PlayerStatsDto;
        competitiveTier: int;
        playerCard: string;
        playerTitle: string;
    }
}

namespace valMatchV1 {
    /**
     * PlayerStatsDto data object, automatically generated.
     */
    export interface PlayerStatsDto {
        puuid: string;
        kills: valMatchV1.KillDto[];
        damage: valMatchV1.DamageDto[];
        score: int;
        economy: valMatchV1.EconomyDto;
        ability: valMatchV1.AbilityDto;
    }
}

namespace valMatchV1 {
    /**
     * KillDto data object, automatically generated.
     */
    export interface KillDto {
        gameTime: int;
        roundTime: int;
        /** PUUID */
        killer: string;
        /** PUUID */
        victim: string;
        victimLocation: valMatchV1.LocationDto;
        /** List of PUUIDs */
        assistants: string[];
        playerLocations: valMatchV1.PlayerLocationsDto[];
        finishingDamage: valMatchV1.FinishingDamageDto;
    }
}

namespace valMatchV1 {
    /**
     * LocationDto data object, automatically generated.
     */
    export interface LocationDto {
        x: int;
        y: int;
    }
}

namespace valMatchV1 {
    /**
     * PlayerLocationsDto data object, automatically generated.
     */
    export interface PlayerLocationsDto {
        puuid: string;
        viewRadians: float;
        location: valMatchV1.LocationDto;
    }
}

namespace valMatchV1 {
    /**
     * FinishingDamageDto data object, automatically generated.
     */
    export interface FinishingDamageDto {
        damageType: string;
        damageItem: string;
        isSecondaryFireMode: boolean;
    }
}

namespace valMatchV1 {
    /**
     * DamageDto data object, automatically generated.
     */
    export interface DamageDto {
        /** PUUID */
        receiver: string;
        damage: int;
        legshots: int;
        bodyshots: int;
        headshots: int;
    }
}

namespace valMatchV1 {
    /**
     * EconomyDto data object, automatically generated.
     */
    export interface EconomyDto {
        loadoutValue: int;
        weapon: string;
        armor: string;
        remaining: int;
        spent: int;
    }
}

namespace valMatchV1 {
    /**
     * AbilityDto data object, automatically generated.
     */
    export interface AbilityDto {
        grenadeEffects: string;
        ability1Effects: string;
        ability2Effects: string;
        ultimateEffects: string;
    }
}

namespace valMatchV1 {
    /**
     * TeamDto data object, automatically generated.
     */
    export interface TeamDto {
        teamId: string;
        won: boolean;
        roundsPlayed: int;
        roundsWon: int;
    }
}

namespace valMatchV1 {
    /**
     * RoundResultDto data object, automatically generated.
     */
    export interface RoundResultDto {
        roundNum: int;
        roundResult: string;
        roundCeremony: string;
        winningTeam: string;
        /** PUUID of player */
        bombPlanter: string;
        /** PUUID of player */
        bombDefuser: string;
        plantRoundTime: int;
        plantPlayerLocations: valMatchV1.PlayerLocationsDto[];
        plantLocation: valMatchV1.LocationDto;
        plantSite: string;
        defuseRoundTime: int;
        defusePlayerLocations: valMatchV1.PlayerLocationsDto[];
        defuseLocation: valMatchV1.LocationDto;
        playerStats: valMatchV1.PlayerStatsDto[];
        roundResultCode: string;
    }
}

namespace valMatchV1 {
    /**
     * MatchlistDto data object, automatically generated.
     */
    export interface MatchlistDto {
        puuid: string;
        history: valMatchV1.MatchReferenceDto[];
    }
}

namespace valMatchV1 {
    /**
     * MatchReferenceDto data object, automatically generated.
     */
    export interface MatchReferenceDto {
        matchId: string;
        gameStartTime: long;
        teamId: string;
    }
}
