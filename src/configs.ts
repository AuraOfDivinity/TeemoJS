///////////////////////////////////////////////
//                                           //
//                     !                     //
//   This file is automatically generated!   //
//           Do not directly edit!           //
//                                           //
///////////////////////////////////////////////

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version a5b01fc25c1ca5adff831c8331955f33ba0fdcf3

const RiotApiConfig = {
    apiKeys: undefined,
    origin: "https://{}.api.riotgames.com",
    defaultBuckets: [
        {
            timespan: 1000,
            limit: 1,
            bins: 1,
            binFactor: 1,
            overhead: 0,
        },
    ],
    rateLimitTypeApplication: {
        name: "application",
        headerLimit: "x-app-rate-limit",
        headerCount: "x-app-rate-limit-count",
    },
    rateLimitTypeMethod: {
        name: "method",
        headerLimit: "x-method-rate-limit",
        headerCount: "x-method-rate-limit-count",
    },
    maxConcurrent: 500,
    distFactor: 1.0,
    headerLimitType: "x-rate-limit-type",
    headerRetryAfter: "retry-after",
    bucketsConfig: {},
    endpoints: {
        championMasteryV4: {
            /**
             * Get all champion mastery entries sorted by number of champion points descending,
             */
            getAllChampionMasteries: {
                path: "/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<championMasteryV4.ChampionMasteryDTO[], PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedSummonerId: string } | [ string ], {}, undefined>,
            /**
             * Get a champion mastery by player ID and champion ID.
             */
            getChampionMastery: {
                path: "/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{championId}",
            } as ReqSpec<championMasteryV4.ChampionMasteryDTO | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedSummonerId: string, championId: long } | [ string, long ], {}, undefined>,
            /**
             * Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
             */
            getChampionMasteryScore: {
                path: "/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<int, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        championV3: {
            /**
             * Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
             */
            getChampionInfo: {
                path: "/lol/platform/v3/champion-rotations",
            } as ReqSpec<championV3.ChampionInfo, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, {} | [], {}, undefined>,
        },
        clashV1: {
            /**
             * Get players by summoner ID.
             * ## Implementation Notes
             * This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
             */
            getPlayersBySummoner: {
                path: "/lol/clash/v1/players/by-summoner/{summonerId}",
            } as ReqSpec<clashV1.PlayerDto[], PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { summonerId: string } | [ string ], {}, undefined>,
            /**
             * Get team by ID.
             */
            getTeamById: {
                path: "/lol/clash/v1/teams/{teamId}",
            } as ReqSpec<clashV1.TeamDto | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { teamId: string } | [ string ], {}, undefined>,
            /**
             * Get all active or upcoming tournaments.
             */
            getTournaments: {
                path: "/lol/clash/v1/tournaments",
            } as ReqSpec<clashV1.TournamentDto[], PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, {} | [], {}, undefined>,
            /**
             * Get tournament by team ID.
             */
            getTournamentByTeam: {
                path: "/lol/clash/v1/tournaments/by-team/{teamId}",
            } as ReqSpec<clashV1.TournamentDto | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { teamId: string } | [ string ], {}, undefined>,
            /**
             * Get tournament by ID.
             */
            getTournamentById: {
                path: "/lol/clash/v1/tournaments/{tournamentId}",
            } as ReqSpec<clashV1.TournamentDto | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { tournamentId: int } | [ int ], {}, undefined>,
        },
        leagueExpV4: {
            /**
             * Get all the league entries.
             */
            getLeagueEntries: {
                path: "/lol/league-exp/v4/entries/{queue}/{tier}/{division}",
            } as ReqSpec<leagueExpV4.LeagueEntryDTO[], PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { queue: "RANKED_SOLO_5x5" | "RANKED_TFT" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", tier: "CHALLENGER" | "GRANDMASTER" | "MASTER" | "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", division: "I" | "II" | "III" | "IV" } | [ "RANKED_SOLO_5x5" | "RANKED_TFT" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", "CHALLENGER" | "GRANDMASTER" | "MASTER" | "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", "I" | "II" | "III" | "IV" ], { page?: int | null }, undefined>,
        },
        leagueV4: {
            /**
             * Get the challenger league for given queue.
             */
            getChallengerLeague: {
                path: "/lol/league/v4/challengerleagues/by-queue/{queue}",
            } as ReqSpec<leagueV4.LeagueListDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" ], {}, undefined>,
            /**
             * Get league entries in all queues for a given summoner ID.
             */
            getLeagueEntriesForSummoner: {
                path: "/lol/league/v4/entries/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<leagueV4.LeagueEntryDTO[], PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedSummonerId: string } | [ string ], {}, undefined>,
            /**
             * Get all the league entries.
             */
            getLeagueEntries: {
                path: "/lol/league/v4/entries/{queue}/{tier}/{division}",
            } as ReqSpec<leagueV4.LeagueEntryDTO[], PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", tier: "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", division: "I" | "II" | "III" | "IV" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT", "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", "I" | "II" | "III" | "IV" ], { page?: int | null }, undefined>,
            /**
             * Get the grandmaster league of a specific queue.
             */
            getGrandmasterLeague: {
                path: "/lol/league/v4/grandmasterleagues/by-queue/{queue}",
            } as ReqSpec<leagueV4.LeagueListDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" ], {}, undefined>,
            /**
             * Get league with given ID, including inactive entries.
             */
            getLeagueById: {
                path: "/lol/league/v4/leagues/{leagueId}",
            } as ReqSpec<leagueV4.LeagueListDTO | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { leagueId: string } | [ string ], {}, undefined>,
            /**
             * Get the master league for given queue.
             */
            getMasterLeague: {
                path: "/lol/league/v4/masterleagues/by-queue/{queue}",
            } as ReqSpec<leagueV4.LeagueListDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { queue: "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" } | [ "RANKED_SOLO_5x5" | "RANKED_FLEX_SR" | "RANKED_FLEX_TT" ], {}, undefined>,
        },
        lolStatusV3: {
            /**
             * Get League of Legends status for the given shard.
             * ## Rate Limit Notes
             * Requests to this API are not counted against the application Rate Limits.
             */
            getShardData: {
                path: "/lol/status/v3/shard-data",
            } as ReqSpec<lolStatusV3.ShardStatus, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.PBE1 | PlatformRoute.RU | PlatformRoute.TR1, {} | [], {}, undefined>,
        },
        lorRankedV1: {
            /**
             * Get the players in Master tier.
             */
            getLeaderboards: {
                path: "/lor/ranked/v1/leaderboards",
                apiKeyName: "lor",
            } as ReqSpec<lorRankedV1.LeaderboardDto, RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.EUROPE | RegionalRoute.SEA, {} | [], {}, undefined>,
        },
        matchV4: {
            /**
             * Get match IDs by tournament code.
             */
            getMatchIdsByTournamentCode: {
                path: "/lol/match/v4/matches/by-tournament-code/{tournamentCode}/ids",
            } as ReqSpec<long[], PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Get match by match ID.
             */
            getMatch: {
                path: "/lol/match/v4/matches/{matchId}",
            } as ReqSpec<matchV4.MatchDto | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { matchId: long } | [ long ], {}, undefined>,
            /**
             * Get match by match ID and tournament code.
             */
            getMatchByTournamentCode: {
                path: "/lol/match/v4/matches/{matchId}/by-tournament-code/{tournamentCode}",
            } as ReqSpec<matchV4.MatchDto, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { matchId: long, tournamentCode: string } | [ long, string ], {}, undefined>,
            /**
             * Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.
             * ## Implementation Notes
             * A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.
             * 
             * If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.
             * 
             * If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
             */
            getMatchlist: {
                path: "/lol/match/v4/matchlists/by-account/{encryptedAccountId}",
            } as ReqSpec<matchV4.MatchlistDto | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedAccountId: string } | [ string ], { champion?: int[] | null, queue?: int[] | null, season?: int[] | null, endTime?: long | null, beginTime?: long | null, endIndex?: int | null, beginIndex?: int | null }, undefined>,
            /**
             * Get match timeline by match ID.
             * ## Implementation Notes
             * Not all matches have timeline data.
             */
            getMatchTimeline: {
                path: "/lol/match/v4/timelines/by-match/{matchId}",
            } as ReqSpec<matchV4.MatchTimelineDto | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { matchId: long } | [ long ], {}, undefined>,
        },
        spectatorV4: {
            /**
             * Get current game information for the given summoner ID.
             */
            getCurrentGameInfoBySummoner: {
                path: "/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<spectatorV4.CurrentGameInfo | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedSummonerId: string } | [ string ], {}, undefined>,
            /**
             * Get list of featured games.
             */
            getFeaturedGames: {
                path: "/lol/spectator/v4/featured-games",
            } as ReqSpec<spectatorV4.FeaturedGames, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, {} | [], {}, undefined>,
        },
        summonerV4: {
            /**
             * Get a summoner by account ID.
             */
            getByAccountId: {
                path: "/lol/summoner/v4/summoners/by-account/{encryptedAccountId}",
            } as ReqSpec<summonerV4.SummonerDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedAccountId: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by summoner name.
             */
            getBySummonerName: {
                path: "/lol/summoner/v4/summoners/by-name/{summonerName}",
            } as ReqSpec<summonerV4.SummonerDTO | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { summonerName: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by PUUID.
             */
            getByPUUID: {
                path: "/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}",
            } as ReqSpec<summonerV4.SummonerDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by summoner ID.
             */
            getBySummonerId: {
                path: "/lol/summoner/v4/summoners/{encryptedSummonerId}",
            } as ReqSpec<summonerV4.SummonerDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        tftLeagueV1: {
            /**
             * Get the challenger league.
             */
            getChallengerLeague: {
                path: "/tft/league/v1/challenger",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, {} | [], {}, undefined>,
            /**
             * Get league entries for a given summoner ID.
             */
            getLeagueEntriesForSummoner: {
                path: "/tft/league/v1/entries/by-summoner/{encryptedSummonerId}",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueEntryDTO[], PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedSummonerId: string } | [ string ], {}, undefined>,
            /**
             * Get all the league entries.
             */
            getLeagueEntries: {
                path: "/tft/league/v1/entries/{tier}/{division}",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueEntryDTO[], PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { tier: "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", division: "I" | "II" | "III" | "IV" } | [ "DIAMOND" | "PLATINUM" | "GOLD" | "SILVER" | "BRONZE" | "IRON", "I" | "II" | "III" | "IV" ], { page?: int | null }, undefined>,
            /**
             * Get the grandmaster league.
             */
            getGrandmasterLeague: {
                path: "/tft/league/v1/grandmaster",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, {} | [], {}, undefined>,
            /**
             * Get league with given ID, including inactive entries.
             */
            getLeagueById: {
                path: "/tft/league/v1/leagues/{leagueId}",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { leagueId: string } | [ string ], {}, undefined>,
            /**
             * Get the master league.
             */
            getMasterLeague: {
                path: "/tft/league/v1/master",
                apiKeyName: "tft",
            } as ReqSpec<tftLeagueV1.LeagueListDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, {} | [], {}, undefined>,
        },
        tftMatchV1: {
            /**
             * Get a list of match ids by PUUID.
             */
            getMatchIdsByPUUID: {
                path: "/tft/match/v1/matches/by-puuid/{puuid}/ids",
                apiKeyName: "tft",
            } as ReqSpec<string[], RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.EUROPE, { puuid: String } | [ String ], { count?: int | null }, undefined>,
            /**
             * Get a match by match id.
             */
            getMatch: {
                path: "/tft/match/v1/matches/{matchId}",
                apiKeyName: "tft",
            } as ReqSpec<tftMatchV1.MatchDto | null, RegionalRoute.AMERICAS | RegionalRoute.ASIA | RegionalRoute.EUROPE, { matchId: String } | [ String ], {}, undefined>,
        },
        tftSummonerV1: {
            /**
             * Get a summoner by account ID.
             */
            getByAccountId: {
                path: "/tft/summoner/v1/summoners/by-account/{encryptedAccountId}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedAccountId: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by summoner name.
             */
            getBySummonerName: {
                path: "/tft/summoner/v1/summoners/by-name/{summonerName}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO | null, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { summonerName: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by PUUID.
             */
            getByPUUID: {
                path: "/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedPUUID: string } | [ string ], {}, undefined>,
            /**
             * Get a summoner by summoner ID.
             */
            getBySummonerId: {
                path: "/tft/summoner/v1/summoners/{encryptedSummonerId}",
                apiKeyName: "tft",
            } as ReqSpec<tftSummonerV1.SummonerDTO, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        thirdPartyCodeV4: {
            /**
             * Get third party code for a given summoner ID.
             */
            getThirdPartyCodeBySummonerId: {
                path: "/lol/platform/v4/third-party-code/by-summoner/{encryptedSummonerId}",
            } as ReqSpec<String, PlatformRoute.BR1 | PlatformRoute.EUN1 | PlatformRoute.EUW1 | PlatformRoute.JP1 | PlatformRoute.KR | PlatformRoute.LA1 | PlatformRoute.LA2 | PlatformRoute.NA1 | PlatformRoute.OC1 | PlatformRoute.RU | PlatformRoute.TR1, { encryptedSummonerId: string } | [ string ], {}, undefined>,
        },
        tournamentStubV4: {
            /**
             * Create a mock tournament code for the given tournament.
             */
            createTournamentCode: {
                path: "/lol/tournament-stub/v4/codes",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<string[], RegionalRoute.AMERICAS, {} | [], { count?: int | null, tournamentId: long }, tournamentStubV4.TournamentCodeParameters>,
            /**
             * Gets a mock list of lobby events by tournament code.
             */
            getLobbyEventsByCode: {
                path: "/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentStubV4.LobbyEventDTOWrapper, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Creates a mock tournament provider and returns its ID.
             * ## Implementation Notes
             * Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
             */
            registerProviderData: {
                path: "/lol/tournament-stub/v4/providers",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentStubV4.ProviderRegistrationParameters>,
            /**
             * Creates a mock tournament and returns its ID.
             */
            registerTournament: {
                path: "/lol/tournament-stub/v4/tournaments",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentStubV4.TournamentRegistrationParameters>,
        },
        tournamentV4: {
            /**
             * Create a tournament code for the given tournament.
             */
            createTournamentCode: {
                path: "/lol/tournament/v4/codes",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<string[], RegionalRoute.AMERICAS, {} | [], { count?: int | null, tournamentId: long }, tournamentV4.TournamentCodeParameters>,
            /**
             * Returns the tournament code DTO associated with a tournament code string.
             */
            getTournamentCode: {
                path: "/lol/tournament/v4/codes/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentV4.TournamentCodeDTO, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Update the pick type, map, spectator type, or allowed summoners for a code.
             */
            updateCode: {
                path: "/lol/tournament/v4/codes/{tournamentCode}",
                method: "put",
                apiKeyName: "tournament",
            } as ReqSpec<void, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, tournamentV4.TournamentCodeUpdateParameters>,
            /**
             * Gets a list of lobby events by tournament code.
             */
            getLobbyEventsByCode: {
                path: "/lol/tournament/v4/lobby-events/by-code/{tournamentCode}",
                apiKeyName: "tournament",
            } as ReqSpec<tournamentV4.LobbyEventDTOWrapper, RegionalRoute.AMERICAS, { tournamentCode: string } | [ string ], {}, undefined>,
            /**
             * Creates a tournament provider and returns its ID.
             * ## Implementation Notes
             * Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
             */
            registerProviderData: {
                path: "/lol/tournament/v4/providers",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentV4.ProviderRegistrationParameters>,
            /**
             * Creates a tournament and returns its ID.
             */
            registerTournament: {
                path: "/lol/tournament/v4/tournaments",
                method: "post",
                apiKeyName: "tournament",
            } as ReqSpec<int, RegionalRoute.AMERICAS, {} | [], {}, tournamentV4.TournamentRegistrationParameters>,
        },
        valContentV1: {
            /**
             * Get content optionally filtered by locale
             */
            getContent: {
                path: "/val/content/v1/contents",
            } as ReqSpec<valContentV1.ContentDto, ValPlatformRoute.APAC | ValPlatformRoute.BR | ValPlatformRoute.EU | ValPlatformRoute.KR | ValPlatformRoute.LATAM | ValPlatformRoute.NA, {} | [], { locale?: String | null }, undefined>,
        },
        valMatchV1: {
            /**
             * Get match by id
             */
            getMatch: {
                path: "/val/match/v1/matches/{matchId}",
            } as ReqSpec<valMatchV1.MatchDto, ValPlatformRoute.APAC | ValPlatformRoute.BR | ValPlatformRoute.EU | ValPlatformRoute.KR | ValPlatformRoute.LATAM | ValPlatformRoute.NA, { matchId: String } | [ String ], {}, undefined>,
            /**
             * Get matchlist for games played by puuid
             */
            getMatchlist: {
                path: "/val/match/v1/matchlists/by-puuid/{puuid}",
            } as ReqSpec<valMatchV1.MatchlistDto, ValPlatformRoute.APAC | ValPlatformRoute.BR | ValPlatformRoute.EU | ValPlatformRoute.KR | ValPlatformRoute.LATAM | ValPlatformRoute.NA, { puuid: String } | [ String ], {}, undefined>,
        },
    },
};

/** API key dictionary for RiotApi endpoints. "default" corresponds to League of Legends endpoints. */
interface RiotApiKeys {
    default: string,
    tft?: string,
    lor?: string,
    tournament?: string,
    [apiKeyName: string]: string | undefined,
}

// TODO: other specs.

Object.assign(module.exports, { RiotApiConfig });
